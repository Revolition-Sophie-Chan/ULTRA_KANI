//====================================================================================================
//
//セーブ処理 [save.cpp]
//Author : tanaka rikiya
//
//====================================================================================================
//====================================================================================================
//インクルードファイル
//====================================================================================================
#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include "save.h"
#include "load.h"

//====================================================================================================
//マクロ定義
//====================================================================================================
#define	TEXTURE_SAVE		"Data/Texture/number001.png"	// 読み込むテクスチャファイル名
#define SAVE_SIZE			(20)							// セーブボードの大きさ
#define SAVE_MAX			(10)							// 数値
#define SAVE_DATA			(5)								// セーブ数
#define SAVE_FILE_NAME		("Data/text/rank.txt")			// セーブファイル

// ====================================================================================================
// プロトタイプ宣言
// ====================================================================================================

// ====================================================================================================
// グローバル変数宣言
// ====================================================================================================
SAVE g_aSave[5];// セーブ変数

// ====================================================================================================
// 初期化処理
// ====================================================================================================
void InitSave(void)
{
	int nCntSave;
	LPDIRECT3DDEVICE9 pDevice = GetDevice();

	for (nCntSave = 0; nCntSave < SAVE_DATA; nCntSave++)
	{
		g_aSave[nCntSave].nScore = 0;
		g_aSave[nCntSave].nPoint = 0;
	}
}

// ====================================================================================================
// セーブ関数
// ====================================================================================================
void SaveData(int nPoint)
{
	FILE *pFile;
	int aData[6] = {};
	int nWork;
	int nCntSave;
	int nCntNum;

	LOAD *pLoad;
	pLoad = GetLoad();

	for (nCntSave = 0; nCntSave < SAVE_DATA; nCntSave++, pLoad++)
	{
		g_aSave[nCntSave].nPoint = pLoad->nPoint;
		aData[nCntSave] = g_aSave[nCntSave].nPoint;
	}
	aData[5] = nPoint;

	for (nCntSave = 0; nCntSave < SAVE_DATA + 1; nCntSave++)
	{
		for (nCntNum = nCntSave + 1; nCntNum < SAVE_DATA + 1; nCntNum++)
		{
			if (aData[nCntSave] < aData[nCntNum])
			{
				nWork = aData[nCntNum];
				aData[nCntNum] = aData[nCntSave];
				aData[nCntSave] = nWork;
			}
		}
	}

	// ファイル開く
	pFile = fopen(SAVE_FILE_NAME, "w");

	// 開けたとき
 	if (pFile != NULL)
	{
		for (nCntSave = 0; nCntSave < SAVE_DATA; nCntSave++)
		{
			fprintf(pFile, "%d\n\n", aData[nCntSave]);	// ポイント
		}
		// ファイル閉じる
		fclose(pFile);
	}
	// 開けなかったとき
	else
	{
		printf("開けませんでした\n");
	}
}

// ====================================================================================================
// セーブデータ取得
// ====================================================================================================
SAVE *GetSave(void)
{
	return &g_aSave[0];
}
